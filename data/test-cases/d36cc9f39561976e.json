{"uid":"d36cc9f39561976e","name":"test_csys_startmodel_restart_cube","fullName":"casatasks.test_task_tclean.test_startmodel#test_csys_startmodel_restart_cube","historyId":"6757a39037659b2573dd9fcc36b87a3f","time":{"start":1758047359175,"stop":1758047379116,"duration":19941},"description":" [startmodel] test_csys_startmodel_restart_cube : Check that csys differences w.r.to latpoles for parallel vs serial runs are appropriately squashed. \n\n          Run a sequence of tclean runs to trigger a complicated situation of restarts, mixing serial/parallel and model writes. \n          This sequence, coupled with the algorithm options listed below in tests #1 through #6 trigger three different errors that\n          have been fixed in this branch, and one that will be addressed via CAS-9386 (cube refactor). \n\n          tclean call sequence : \n          --- (a) Parallel run for niter=0\n          --- (b) Serial/Parallel run for niter=10, with calcres=F, calcpsf=F  : to reuse images from prev.\n          --- (c) Serial model-predict run (without/with startmodel) : in one case it reuses prev image-set. in other case it reuses only 'model'. \n          --- (d) Impbcor on the output of (b)\n\n          Note that this is not a full fix of the various instances of the 'latpole' inconsistency, but only a workaround. \n          Hence it needs a test to ensure this keeps working. \n          ","descriptionHtml":"<p>[startmodel] test_csys_startmodel_restart_cube : Check that csys differences w.r.to latpoles for parallel vs serial runs are appropriately squashed.</p>\n<pre><code>      Run a sequence of tclean runs to trigger a complicated situation of restarts, mixing serial/parallel and model writes. \n      This sequence, coupled with the algorithm options listed below in tests #1 through #6 trigger three different errors that\n      have been fixed in this branch, and one that will be addressed via CAS-9386 (cube refactor). \n\n      tclean call sequence : \n      --- (a) Parallel run for niter=0\n      --- (b) Serial/Parallel run for niter=10, with calcres=F, calcpsf=F  : to reuse images from prev.\n      --- (c) Serial model-predict run (without/with startmodel) : in one case it reuses prev image-set. in other case it reuses only 'model'. \n      --- (d) Impbcor on the output of (b)\n\n      Note that this is not a full fix of the various instances of the 'latpole' inconsistency, but only a workaround. \n      Hence it needs a test to ensure this keeps working. \n</code></pre>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_test_startmodel","time":{"start":1758047359175,"stop":1758047359175,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":" [startmodel] test_csys_startmodel_restart_cube : Check that csys differences w.r.to latpoles for parallel vs serial runs are appropriately squashed. \n\n          Run a sequence of tclean runs to trigger a complicated situation of restarts, mixing serial/parallel and model writes. \n          This sequence, coupled with the algorithm options listed below in tests #1 through #6 trigger three different errors that\n          have been fixed in this branch, and one that will be addressed via CAS-9386 (cube refactor). \n\n          tclean call sequence : \n          --- (a) Parallel run for niter=0\n          --- (b) Serial/Parallel run for niter=10, with calcres=F, calcpsf=F  : to reuse images from prev.\n          --- (c) Serial model-predict run (without/with startmodel) : in one case it reuses prev image-set. in other case it reuses only 'model'. \n          --- (d) Impbcor on the output of (b)\n\n          Note that this is not a full fix of the various instances of the 'latpole' inconsistency, but only a workaround. \n          Hence it needs a test to ensure this keeps working. \n          ","status":"passed","steps":[],"attachments":[{"uid":"d5db8441ae8f117b","name":"stdout","source":"d5db8441ae8f117b.txt","type":"text/plain","size":354},{"uid":"6d7e73a85bf42d5f","name":"stderr","source":"6d7e73a85bf42d5f.txt","type":"text/plain","size":2222}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_test_startmodel::0","time":{"start":1758047444709,"stop":1758047444709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"casatasks"},{"name":"suite","value":"test_task_tclean"},{"name":"subSuite","value":"test_startmodel"},{"name":"host","value":"casa-rockylinux8-amd64-perf07"},{"name":"thread","value":"597558-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"casatasks.test_task_tclean"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":2},"items":[{"uid":"2d8d892e867e4998","status":"passed","time":{"start":1758047359175,"stop":1758047379116,"duration":19941}}]},"tags":[]},"source":"d36cc9f39561976e.json","parameterValues":[]}