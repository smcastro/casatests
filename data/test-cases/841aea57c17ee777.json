{"uid":"841aea57c17ee777","name":"test_ICRS","fullName":"casatools.test_tool_regionmanager.rg_fromtextfile_test#test_ICRS","historyId":"283c767b2461d70b0b2d45bb02409890","time":{"start":1758034734355,"stop":1758034734395,"duration":40},"description":"\n        CAS-13074, verify that coord=ICRS works correctly\n\n        1. Create a 100x100 image using the default coordinate system provided by ia.shape()\n\n        2. Modify the coordinate system of the image from J2000 to GALACTIC ref frame,\n           since the difference between J2000 and ICRS seems to be only about 10 marcsec,\n           so we need to use a coordinate system where the values in the two systems differ\n           more to get a convincing test.\n\n        3. Set all pixels to 0, except the reference pixel 50, 50 which is set to 1.\n\n        4. Create a CRTF region string using coords='ICRS' and a box that is centered at\n           GALACTIC long=0, lat=0 (the ref direction in the image) but using ICRS coords\n           of course. The hardcoded ICRS coords were determined using me.measure() to\n           convert from GALACTIC to ICRS.\n\n        5. Run ia.statistics() using region=the CRTF text string previously created.\n\n        6. Test that the max pixel value found in the region is 1. This indicates that\n           the region was applied correctly.\n\n        ","descriptionHtml":"<pre><code>    CAS-13074, verify that coord=ICRS works correctly\n\n    1. Create a 100x100 image using the default coordinate system provided by ia.shape()\n\n    2. Modify the coordinate system of the image from J2000 to GALACTIC ref frame,\n       since the difference between J2000 and ICRS seems to be only about 10 marcsec,\n       so we need to use a coordinate system where the values in the two systems differ\n       more to get a convincing test.\n\n    3. Set all pixels to 0, except the reference pixel 50, 50 which is set to 1.\n\n    4. Create a CRTF region string using coords='ICRS' and a box that is centered at\n       GALACTIC long=0, lat=0 (the ref direction in the image) but using ICRS coords\n       of course. The hardcoded ICRS coords were determined using me.measure() to\n       convert from GALACTIC to ICRS.\n\n    5. Run ia.statistics() using region=the CRTF text string previously created.\n\n    6. Test that the max pixel value found in the region is 1. This indicates that\n       the region was applied correctly.\n</code></pre>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_rg_fromtextfile_test","time":{"start":1758034727087,"stop":1758034727087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        CAS-13074, verify that coord=ICRS works correctly\n\n        1. Create a 100x100 image using the default coordinate system provided by ia.shape()\n\n        2. Modify the coordinate system of the image from J2000 to GALACTIC ref frame,\n           since the difference between J2000 and ICRS seems to be only about 10 marcsec,\n           so we need to use a coordinate system where the values in the two systems differ\n           more to get a convincing test.\n\n        3. Set all pixels to 0, except the reference pixel 50, 50 which is set to 1.\n\n        4. Create a CRTF region string using coords='ICRS' and a box that is centered at\n           GALACTIC long=0, lat=0 (the ref direction in the image) but using ICRS coords\n           of course. The hardcoded ICRS coords were determined using me.measure() to\n           convert from GALACTIC to ICRS.\n\n        5. Run ia.statistics() using region=the CRTF text string previously created.\n\n        6. Test that the max pixel value found in the region is 1. This indicates that\n           the region was applied correctly.\n\n        ","status":"passed","steps":[],"attachments":[{"uid":"20e27341f4e31553","name":"stderr","source":"20e27341f4e31553.txt","type":"text/plain","size":489}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_rg_fromtextfile_test::0","time":{"start":1758034734944,"stop":1758034734944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"casatools"},{"name":"suite","value":"test_tool_regionmanager"},{"name":"subSuite","value":"rg_fromtextfile_test"},{"name":"host","value":"casa-rockylinux8-amd64-perf07"},{"name":"thread","value":"593221-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"casatools.test_tool_regionmanager"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":2},"items":[{"uid":"a40de32c09d2e491","status":"passed","time":{"start":1758034734355,"stop":1758034734395,"duration":40}}]},"tags":[]},"source":"841aea57c17ee777.json","parameterValues":[]}